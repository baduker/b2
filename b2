#!/bin/bash

# b2 [BranchBuster] - A utility script that removes gone branches from the local repository.

set -euo pipefail

readonly VERSION="0.2.0"

# Find gone git branches locally
find_gone_branches() {
  git fetch -p
  git branch -vv | awk '/: gone]/{if ($1 != "*") print $1}'
}

# Delete gone branches from the local repository
delete_gone_branches() {
  set +e
  local branch
  local branches=("$@")
  echo -e "\nDeleting the following branches:"
  printf '%s\n' "${branches[@]}"
  for branch in "${branches[@]}"; do
    git branch -D "$branch" || echo "Failed to delete branch: $branch"
  done
  set -e
}

# Ask for user input to delete gone branches
ask_for_user_input() {
  local answer
  local gone_branches=("$@")
  echo "The following branches are gone:"
  for i in "${!gone_branches[@]}"; do
    echo "$((i + 1)). ${gone_branches[$i]}"
  done

  local main_prompt="Enter 'y' to delete all, 'n' to skip, or select by number: "
  while true; do
    read -r -p "$main_prompt" answer
    case "$answer" in
      [Yy])
        delete_gone_branches "${gone_branches[@]}"
        break
        ;;
      [Nn])
        echo "No branches deleted."
        break
        ;;
      *)
        if [[ "$answer" =~ ^[0-9]+( [0-9]+)*$ ]]; then
          local number
          local selected_branches=()
          for number in $answer; do
            if ((number > 0 && number <= ${#gone_branches[@]})); then
              selected_branches+=("${gone_branches[$((number - 1))]}")
            else
              echo "Invalid branch number: $number"
            fi
          done
          if [ "${#selected_branches[@]}" -gt 0 ]; then
            echo "You selected the following branches for deletion:"
            printf '%s\n' "${selected_branches[@]}"
            delete_gone_branches "${selected_branches[@]}"
          else
            echo "No valid selections made."
          fi
          break
        else
          echo "Invalid input. Please enter 'y', 'n', or branch numbers separated by spaces."
        fi
        ;;
    esac
  done
}

# Show the version of the script
show_version() {
  local current_year
  current_year=$(date +'%Y')
  echo -e "\nb2 [BranchBuster] v$VERSION %s | coded by baduker" $current_year
}

# Main function
main() {
  local line
  local gone_branches
  echo "Checking for gone branches..."
  gone_branches=()
  while IFS= read -r line; do
    gone_branches+=("$line")
  done < <(find_gone_branches)
  if [ "${#gone_branches[@]}" -gt 0 ]; then
    ask_for_user_input "${gone_branches[@]}"
    show_version
  else
    echo -e "\nNo gone branches found!"
    show_version
  fi
}

main "$@"
